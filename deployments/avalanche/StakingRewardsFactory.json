{
  "address": "0xC8eEb091755426f163276AE28bb499B37BF71618",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingRewards",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "StakingRewardsCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "StakingRewardsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSeized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_stakingTokenMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "helperContract",
          "type": "address"
        }
      ],
      "name": "createStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStakingRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "getStakingRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingRewardsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getStakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "removeStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f426556590ee5769bd41980942b2a69468d9698547acbfcbe2cabbee640feca",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0xC8eEb091755426f163276AE28bb499B37BF71618",
    "transactionIndex": 11,
    "gasUsed": "3069688",
    "logsBloom": "0x
    "blockHash": "0x19708f891619af36b3e09993dba6487d33bc77500e431cc3c43b8a9724fbd842",
    "transactionHash": "0x8f426556590ee5769bd41980942b2a69468d9698547acbfcbe2cabbee640feca",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 14212708,
        "transactionHash": "0x8f426556590ee5769bd41980942b2a69468d9698547acbfcbe2cabbee640feca",
        "address": "0xC8eEb091755426f163276AE28bb499B37BF71618",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x19708f891619af36b3e09993dba6487d33bc77500e431cc3c43b8a9724fbd842"
      }
    ],
    "blockNumber": 14212708,
    "cumulativeGasUsed": "6606294",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f3b60c1eba4b3826d1e830b5bf49af7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"StakingRewardsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"StakingRewardsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSeized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakingTokenMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"helperContract\",\"type\":\"address\"}],\"name\":\"createStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStakingRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"getStakingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"removeStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createStakingRewards(address[],address)\":{\"params\":{\"stakingTokens\":\"The staking token list\"}},\"getAllStakingRewards()\":{\"returns\":{\"_0\":\"All the staking reward contracts\"}},\"getStakingRewards(address)\":{\"params\":{\"stakingToken\":\"The staking token\"},\"returns\":{\"_0\":\"The staking reward contracts\"}},\"getStakingRewardsCount()\":{\"returns\":{\"_0\":\"The amount of staking reward contracts\"}},\"getStakingToken(address)\":{\"params\":{\"underlying\":\"The underlying token\"},\"returns\":{\"_0\":\"The staking token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeStakingRewards(address)\":{\"params\":{\"stakingToken\":\"The staking token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"seize(address,uint256)\":{\"params\":{\"amount\":\"The amount\",\"token\":\"The token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"StakingRewardsCreated(address,address)\":{\"notice\":\"Emitted when a staking rewards contract is deployed\"},\"StakingRewardsRemoved(address)\":{\"notice\":\"Emitted when a staking rewards contract is removed\"},\"TokenSeized(address,uint256)\":{\"notice\":\"Emitted when tokens are seized\"}},\"kind\":\"user\",\"methods\":{\"_stakingTokenMap(address)\":{\"notice\":\"The underlying - staking token mapping\"},\"createStakingRewards(address[],address)\":{\"notice\":\"Create staking reward contracts.\"},\"getAllStakingRewards()\":{\"notice\":\"Return all the staking reward contracts.\"},\"getStakingRewards(address)\":{\"notice\":\"Return the staking rewards contract of a given staking token\"},\"getStakingRewardsCount()\":{\"notice\":\"Return the amount of staking reward contracts.\"},\"getStakingToken(address)\":{\"notice\":\"Return the staking token of a given underlying token\"},\"removeStakingRewards(address)\":{\"notice\":\"Remove a staking reward contract.\"},\"seize(address,uint256)\":{\"notice\":\"Seize tokens in this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewardsFactory.sol\":\"StakingRewardsFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/StakingRewardsInterface.sol\\\";\\n\\ncontract StakingRewards is\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    StakingRewardsInterface\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// @notice The staking token address\\n    IERC20 public stakingToken;\\n\\n    /// @notice The list of rewards tokens\\n    address[] public rewardsTokens;\\n\\n    /// @notice The reward tokens mapping\\n    mapping(address => bool) public rewardsTokensMap;\\n\\n    /// @notice The period finish timestamp of every reward token\\n    mapping(address => uint256) public periodFinish;\\n\\n    /// @notice The reward rate of every reward token\\n    mapping(address => uint256) public rewardRate;\\n\\n    /// @notice The reward duration of every reward token\\n    mapping(address => uint256) public rewardsDuration;\\n\\n    /// @notice The last updated timestamp of every reward token\\n    mapping(address => uint256) public lastUpdateTime;\\n\\n    /// @notice The reward per token of every reward token\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    /// @notice The reward per token paid to users of every reward token\\n    mapping(address => mapping(address => uint256)) public rewardPerTokenPaid;\\n\\n    /// @notice The unclaimed rewards to users of every reward token\\n    mapping(address => mapping(address => uint256)) public rewards;\\n\\n    /// @notice The helper contract that could stake, withdraw and claim rewards for users\\n    address public helperContract;\\n\\n    /// @notice The total amount of the staking token staked in the contract\\n    uint256 private _totalSupply;\\n\\n    /// @notice The user balance of the staking token staked in the contract\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _stakingToken, address _helperContract) {\\n        stakingToken = IERC20(_stakingToken);\\n        helperContract = _helperContract;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n     * @notice Return the total amount of the staking token staked in the contract.\\n     * @return The total supply\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @notice Return user balance of the staking token staked in the contract.\\n     * @return The user balance\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @notice Return the last time reward is applicable.\\n     * @param _rewardsToken The reward token address\\n     * @return The last applicable timestamp\\n     */\\n    function lastTimeRewardApplicable(address _rewardsToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getBlockTimestamp() < periodFinish[_rewardsToken]\\n                ? getBlockTimestamp()\\n                : periodFinish[_rewardsToken];\\n    }\\n\\n    /**\\n     * @notice Return the reward token amount per staking token.\\n     * @param _rewardsToken The reward token address\\n     * @return The reward token amount\\n     */\\n    function rewardPerToken(address _rewardsToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Return 0 if the rewards token is not supported.\\n        if (!rewardsTokensMap[_rewardsToken]) {\\n            return 0;\\n        }\\n\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored[_rewardsToken];\\n        }\\n\\n        // rewardPerTokenStored + [(lastTimeRewardApplicable - lastUpdateTime) * rewardRate / _totalSupply]\\n        return\\n            rewardPerTokenStored[_rewardsToken] +\\n            (((lastTimeRewardApplicable(_rewardsToken) -\\n                lastUpdateTime[_rewardsToken]) *\\n                rewardRate[_rewardsToken] *\\n                1e18) / _totalSupply);\\n    }\\n\\n    /**\\n     * @notice Return the reward token amount a user earned.\\n     * @param _rewardsToken The reward token address\\n     * @param account The user address\\n     * @return The reward token amount\\n     */\\n    function earned(address _rewardsToken, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Return 0 if the rewards token is not supported.\\n        if (!rewardsTokensMap[_rewardsToken]) {\\n            return 0;\\n        }\\n\\n        // rewards + (rewardPerToken - rewardPerTokenPaid) * _balances\\n        return\\n            (_balances[account] *\\n                (rewardPerToken(_rewardsToken) -\\n                    rewardPerTokenPaid[_rewardsToken][account])) /\\n            1e18 +\\n            rewards[_rewardsToken][account];\\n    }\\n\\n    /**\\n     * @notice Return the reward rate.\\n     * @param _rewardsToken The reward token address\\n     * @return The reward rate\\n     */\\n    function getRewardRate(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rewardRate[_rewardsToken];\\n    }\\n\\n    /**\\n     * @notice Return the reward token for duration.\\n     * @param _rewardsToken The reward token address\\n     * @return The reward token amount\\n     */\\n    function getRewardForDuration(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rewardRate[_rewardsToken] * rewardsDuration[_rewardsToken];\\n    }\\n\\n    /**\\n     * @notice Return the amount of reward tokens.\\n     * @return The amount of reward tokens\\n     */\\n    function getRewardsTokenCount() external view returns (uint256) {\\n        return rewardsTokens.length;\\n    }\\n\\n    /**\\n     * @notice Return all the reward tokens.\\n     * @return All the reward tokens\\n     */\\n    function getAllRewardsTokens() external view returns (address[] memory) {\\n        return rewardsTokens;\\n    }\\n\\n    /**\\n     * @notice Return the staking token.\\n     * @return The staking token\\n     */\\n    function getStakingToken() external view returns (address) {\\n        return address(stakingToken);\\n    }\\n\\n    /**\\n     * @notice Return the current block timestamp.\\n     * @return The current block timestamp\\n     */\\n    function getBlockTimestamp() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Stake the staking token.\\n     * @param amount The amount of the staking token\\n     */\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender)\\n    {\\n        _stakeFor(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Stake the staking token for other user.\\n     * @param account The user address\\n     * @param amount The amount of the staking token\\n     */\\n    function stakeFor(address account, uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(account)\\n    {\\n        require(msg.sender == helperContract, \\\"unauthorized\\\");\\n        require(account != address(0), \\\"invalid account\\\");\\n        _stakeFor(account, amount);\\n    }\\n\\n    function _stakeFor(address account, uint256 amount) internal {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw the staked token.\\n     * @param amount The amount of the staking token\\n     */\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        _withdrawFor(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw the staked token for other user.\\n     * @dev This function can only be called by helper.\\n     * @param account The user address\\n     * @param amount The amount of the staking token\\n     */\\n    function withdrawFor(address account, uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(account)\\n    {\\n        require(msg.sender == helperContract, \\\"unauthorized\\\");\\n        require(account != address(0), \\\"invalid account\\\");\\n        _withdrawFor(account, amount);\\n    }\\n\\n    function _withdrawFor(address account, uint256 amount) internal {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[account] = _balances[account] - amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(account, amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for the message sender.\\n     */\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        _getRewardFor(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for an account.\\n     * @dev This function can only be called by helper.\\n     * @param account The user address\\n     */\\n    function getRewardFor(address account)\\n        public\\n        nonReentrant\\n        updateReward(account)\\n    {\\n        require(msg.sender == helperContract, \\\"unauthorized\\\");\\n        require(account != address(0), \\\"invalid account\\\");\\n        _getRewardFor(account);\\n    }\\n\\n    function _getRewardFor(address account) internal {\\n        for (uint256 i = 0; i < rewardsTokens.length; i++) {\\n            uint256 reward = rewards[rewardsTokens[i]][account];\\n            uint256 remain = IERC20(rewardsTokens[i]).balanceOf(address(this));\\n            if (reward > 0 && reward <= remain) {\\n                rewards[rewardsTokens[i]][account] = 0;\\n                IERC20(rewardsTokens[i]).safeTransfer(account, reward);\\n                emit RewardPaid(account, rewardsTokens[i], reward);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all the staked tokens and claim rewards.\\n     */\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Set new reward amount.\\n     * @dev Make sure the admin deposits `reward` of reward tokens into the contract before calling this function.\\n     * @param rewardsToken The reward token address\\n     * @param reward The reward amount\\n     */\\n    function notifyRewardAmount(address rewardsToken, uint256 reward)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        require(rewardsTokensMap[rewardsToken], \\\"reward token not supported\\\");\\n\\n        if (getBlockTimestamp() >= periodFinish[rewardsToken]) {\\n            rewardRate[rewardsToken] = reward / rewardsDuration[rewardsToken];\\n        } else {\\n            uint256 remaining = periodFinish[rewardsToken] -\\n                getBlockTimestamp();\\n            uint256 leftover = remaining * rewardRate[rewardsToken];\\n            rewardRate[rewardsToken] =\\n                (reward + leftover) /\\n                rewardsDuration[rewardsToken];\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = IERC20(rewardsToken).balanceOf(address(this));\\n        require(\\n            rewardRate[rewardsToken] <= balance / rewardsDuration[rewardsToken],\\n            \\\"reward rate too high\\\"\\n        );\\n\\n        lastUpdateTime[rewardsToken] = getBlockTimestamp();\\n        periodFinish[rewardsToken] =\\n            getBlockTimestamp() +\\n            rewardsDuration[rewardsToken];\\n        emit RewardAdded(rewardsToken, reward);\\n    }\\n\\n    /**\\n     * @notice Seize the accidentally deposited tokens.\\n     * @dev Thes staking tokens cannot be seized.\\n     * @param tokenAddress The token address\\n     * @param tokenAmount The token amount\\n     */\\n    function recoverToken(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            tokenAddress != address(stakingToken),\\n            \\\"cannot withdraw staking token\\\"\\n        );\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Set the rewards duration.\\n     * @param rewardsToken The reward token address\\n     * @param duration The new duration\\n     */\\n    function setRewardsDuration(address rewardsToken, uint256 duration)\\n        external\\n        onlyOwner\\n    {\\n        require(rewardsTokensMap[rewardsToken], \\\"reward token not supported\\\");\\n        require(\\n            getBlockTimestamp() > periodFinish[rewardsToken],\\n            \\\"previous rewards not complete\\\"\\n        );\\n        _setRewardsDuration(rewardsToken, duration);\\n    }\\n\\n    /**\\n     * @notice Support new rewards token.\\n     * @param rewardsToken The reward token address\\n     * @param duration The duration\\n     */\\n    function addRewardsToken(address rewardsToken, uint256 duration)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            !rewardsTokensMap[rewardsToken],\\n            \\\"rewards token already supported\\\"\\n        );\\n\\n        rewardsTokens.push(rewardsToken);\\n        rewardsTokensMap[rewardsToken] = true;\\n        emit RewardsTokenAdded(rewardsToken);\\n\\n        _setRewardsDuration(rewardsToken, duration);\\n    }\\n\\n    /**\\n     * @notice Set the helper contract.\\n     * @param helper The helper contract address\\n     */\\n    function setHelperContract(address helper) external onlyOwner {\\n        helperContract = helper;\\n        emit HelperContractSet(helper);\\n    }\\n\\n    /**\\n     * @notice Pause the staking.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the staking.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _setRewardsDuration(address rewardsToken, uint256 duration)\\n        internal\\n    {\\n        rewardsDuration[rewardsToken] = duration;\\n        emit RewardsDurationUpdated(rewardsToken, duration);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /**\\n     * @notice Update the reward information.\\n     * @param user The user address\\n     */\\n    modifier updateReward(address user) {\\n        for (uint256 i = 0; i < rewardsTokens.length; i++) {\\n            address token = rewardsTokens[i];\\n            rewardPerTokenStored[token] = rewardPerToken(token);\\n            lastUpdateTime[token] = lastTimeRewardApplicable(token);\\n            if (user != address(0)) {\\n                rewards[token][user] = earned(token, user);\\n                rewardPerTokenPaid[token][user] = rewardPerTokenStored[token];\\n            }\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @notice Emitted when new reward tokens are added\\n     */\\n    event RewardAdded(address rewardsToken, uint256 reward);\\n\\n    /**\\n     * @notice Emitted when user staked\\n     */\\n    event Staked(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when user withdrew\\n     */\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when rewards are paied\\n     */\\n    event RewardPaid(\\n        address indexed user,\\n        address rewardsToken,\\n        uint256 reward\\n    );\\n\\n    /**\\n     * @notice Emitted when a reward duration is updated\\n     */\\n    event RewardsDurationUpdated(address rewardsToken, uint256 newDuration);\\n\\n    /**\\n     * @notice Emitted when a token is recovered by admin\\n     */\\n    event Recovered(address token, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a reward token is added\\n     */\\n    event RewardsTokenAdded(address rewardsToken);\\n\\n    /**\\n     * @notice Emitted when new helper contract is set\\n     */\\n    event HelperContractSet(address helper);\\n}\\n\",\"keccak256\":\"0x1474fe300e05e3ef29f08753c9774bbf80ea40b855fd1e32b056b8a260583031\",\"license\":\"MIT\"},\"contracts/StakingRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./StakingRewards.sol\\\";\\nimport \\\"./interfaces/ITokenInterface.sol\\\";\\nimport \\\"./interfaces/StakingRewardsFactoryInterface.sol\\\";\\n\\ncontract StakingRewardsFactory is Ownable, StakingRewardsFactoryInterface {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The list of staking rewards contract\\n    address[] private _stakingRewards;\\n\\n    /// @notice The staking token - staking rewards contract mapping\\n    mapping(address => address) private _stakingRewardsMap;\\n\\n    /// @notice The underlying - staking token mapping\\n    mapping(address => address) public _stakingTokenMap;\\n\\n    /**\\n     * @notice Emitted when a staking rewards contract is deployed\\n     */\\n    event StakingRewardsCreated(\\n        address indexed stakingRewards,\\n        address indexed stakingToken\\n    );\\n\\n    /**\\n     * @notice Emitted when a staking rewards contract is removed\\n     */\\n    event StakingRewardsRemoved(address indexed stakingToken);\\n\\n    /**\\n     * @notice Emitted when tokens are seized\\n     */\\n    event TokenSeized(address token, uint256 amount);\\n\\n    /**\\n     * @notice Return the amount of staking reward contracts.\\n     * @return The amount of staking reward contracts\\n     */\\n    function getStakingRewardsCount() external view returns (uint256) {\\n        return _stakingRewards.length;\\n    }\\n\\n    /**\\n     * @notice Return all the staking reward contracts.\\n     * @return All the staking reward contracts\\n     */\\n    function getAllStakingRewards() external view returns (address[] memory) {\\n        return _stakingRewards;\\n    }\\n\\n    /**\\n     * @notice Return the staking rewards contract of a given staking token\\n     * @param stakingToken The staking token\\n     * @return The staking reward contracts\\n     */\\n    function getStakingRewards(address stakingToken)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _stakingRewardsMap[stakingToken];\\n    }\\n\\n    /**\\n     * @notice Return the staking token of a given underlying token\\n     * @param underlying The underlying token\\n     * @return The staking token\\n     */\\n    function getStakingToken(address underlying)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _stakingTokenMap[underlying];\\n    }\\n\\n    /**\\n     * @notice Create staking reward contracts.\\n     * @param stakingTokens The staking token list\\n     */\\n    function createStakingRewards(\\n        address[] calldata stakingTokens,\\n        address helperContract\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < stakingTokens.length; i++) {\\n            address stakingToken = stakingTokens[i];\\n            address underlying = ITokenInterface(stakingToken).underlying();\\n            require(underlying != address(0), \\\"invalid underlying\\\");\\n            require(\\n                _stakingRewardsMap[stakingToken] == address(0),\\n                \\\"staking rewards contract already exist\\\"\\n            );\\n\\n            // Create a new staking rewards contract.\\n            StakingRewards sr = new StakingRewards(\\n                stakingToken,\\n                helperContract\\n            );\\n            sr.transferOwnership(msg.sender);\\n\\n            _stakingRewards.push(address(sr));\\n            _stakingRewardsMap[stakingToken] = address(sr);\\n            _stakingTokenMap[underlying] = stakingToken;\\n            emit StakingRewardsCreated(address(sr), stakingToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove a staking reward contract.\\n     * @param stakingToken The staking token\\n     */\\n    function removeStakingRewards(address stakingToken) external onlyOwner {\\n        address underlying = ITokenInterface(stakingToken).underlying();\\n        require(underlying != address(0), \\\"invalid underlying\\\");\\n        require(\\n            _stakingRewardsMap[stakingToken] != address(0),\\n            \\\"staking rewards contract not exist\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _stakingRewards.length; i++) {\\n            if (_stakingRewardsMap[stakingToken] == _stakingRewards[i]) {\\n                _stakingRewards[i] = _stakingRewards[\\n                    _stakingRewards.length - 1\\n                ];\\n                delete _stakingRewards[_stakingRewards.length - 1];\\n                _stakingRewards.pop();\\n                break;\\n            }\\n        }\\n        _stakingRewardsMap[stakingToken] = address(0);\\n        _stakingTokenMap[underlying] = address(0);\\n        emit StakingRewardsRemoved(stakingToken);\\n    }\\n\\n    /**\\n     * @notice Seize tokens in this contract.\\n     * @param token The token\\n     * @param amount The amount\\n     */\\n    function seize(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).safeTransfer(owner(), amount);\\n        emit TokenSeized(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x70ccb26dcef7ada39ab8df1c37987f1e820b995dada46e9d9d144849e2b21585\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenInterface {\\n    function underlying() external view returns (address);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdace4492943330452c30d4a7afdcde6c0a113f96df70cddb7be7c8847a108492\",\"license\":\"MIT\"},\"contracts/interfaces/StakingRewardsFactoryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface StakingRewardsFactoryInterface {\\n    function getStakingRewardsCount() external view returns (uint256);\\n\\n    function getAllStakingRewards() external view returns (address[] memory);\\n\\n    function getStakingRewards(address stakingToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function getStakingToken(address underlying)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xd01e0be83f8f137f52637e76f86f867bd39aa085a5f85464032af5d05db32016\",\"license\":\"MIT\"},\"contracts/interfaces/StakingRewardsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface StakingRewardsInterface {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardPerToken(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function earned(address _rewardsToken, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardRate(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardForDuration(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardsTokenCount() external view returns (uint256);\\n\\n    function getAllRewardsTokens() external view returns (address[] memory);\\n\\n    function getStakingToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function stakeFor(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawFor(address account, uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function getRewardFor(address account) external;\\n\\n    function exit() external;\\n}\\n\",\"keccak256\":\"0x8ebf44c9f2171c5ec810b1fb3e26199255884e7afea83640b2805cdcdad58fc3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61361d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063918e4c0d11610071578063918e4c0d1461014f578063ce5f8c9714610164578063d5a1e66a14610177578063e90310be1461018a578063eb9253c0146101b3578063f2fde38b146101c657600080fd5b8063054a0fd3146100ae57806321efe200146100c457806329a71c3c14610108578063715018a6146101345780638da5cb5b1461013e575b600080fd5b6001546040519081526020015b60405180910390f35b6100f06100d2366004610cb4565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b0390911681526020016100bb565b6100f0610116366004610cb4565b6001600160a01b039081166000908152600360205260409020541690565b61013c6101d9565b005b6000546001600160a01b03166100f0565b610157610218565b6040516100bb9190610cd1565b61013c610172366004610d1e565b61027a565b61013c610185366004610cb4565b610563565b6100f0610198366004610cb4565b6003602052600090815260409020546001600160a01b031681565b61013c6101c1366004610da4565b610864565b61013c6101d4366004610cb4565b6108fa565b6000546001600160a01b0316331461020c5760405162461bcd60e51b815260040161020390610dd0565b60405180910390fd5b6102166000610995565b565b6060600180548060200260200160405190810160405280929190818152602001828054801561027057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610252575b5050505050905090565b6000546001600160a01b031633146102a45760405162461bcd60e51b815260040161020390610dd0565b60005b8281101561055d5760008484838181106102c3576102c3610e05565b90506020020160208101906102d89190610cb4565b90506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e9190610e1b565b90506001600160a01b03811661038b5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610203565b6001600160a01b0382811660009081526002602052604090205416156104025760405162461bcd60e51b815260206004820152602660248201527f7374616b696e67207265776172647320636f6e747261637420616c726561647960448201526508195e1a5cdd60d21b6064820152608401610203565b6000828560405161041290610c91565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610445573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b5050600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038086166001600160a01b0319928316811790935587811660008181526002602090815260408083208054871688179055938a168252600390528281208054909416821790935590519094509192507f53fd298a981eaaf793d11bd90cef46decbc420dde2b8d8d47323895b35cba34391a3505050808061055590610e4e565b9150506102a7565b50505050565b6000546001600160a01b0316331461058d5760405162461bcd60e51b815260040161020390610dd0565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610e1b565b90506001600160a01b03811661063e5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610203565b6001600160a01b03828116600090815260026020526040902054166106b05760405162461bcd60e51b815260206004820152602260248201527f7374616b696e67207265776172647320636f6e7472616374206e6f74206578696044820152611cdd60f21b6064820152608401610203565b60005b6001548110156107f657600181815481106106d0576106d0610e05565b60009182526020808320909101546001600160a01b03868116845260029092526040909220548116911614156107e4576001805461070f908290610e69565b8154811061071f5761071f610e05565b600091825260209091200154600180546001600160a01b03909216918390811061074b5761074b610e05565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560018054610783908290610e69565b8154811061079357610793610e05565b600091825260209091200180546001600160a01b031916905560018054806107bd576107bd610e80565b600082815260209020810160001990810180546001600160a01b03191690550190556107f6565b806107ee81610e4e565b9150506106b3565b506001600160a01b03808316600081815260026020908152604080832080546001600160a01b0319908116909155948616835260039091528082208054909416909355915190917f1748d85e1878b20ec727ef2f7992b532d1b6c2485596f909f8f5027bc70f354d91a25050565b6000546001600160a01b0316331461088e5760405162461bcd60e51b815260040161020390610dd0565b6108b46108a36000546001600160a01b031690565b6001600160a01b03841690836109e5565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910160405180910390a15050565b6000546001600160a01b031633146109245760405162461bcd60e51b815260040161020390610dd0565b6001600160a01b0381166109895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610203565b61099281610995565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a37908490610a3c565b505050565b6000610a91826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b0e9092919063ffffffff16565b805190915015610a375780806020019051810190610aaf9190610e96565b610a375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610203565b6060610b1d8484600085610b27565b90505b9392505050565b606082471015610b885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610203565b6001600160a01b0385163b610bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610203565b600080866001600160a01b03168587604051610bfb9190610ee4565b60006040518083038185875af1925050503d8060008114610c38576040519150601f19603f3d011682016040523d82523d6000602084013e610c3d565b606091505b5091509150610c4d828286610c58565b979650505050505050565b60608315610c67575081610b20565b825115610c775782518084602001fd5b8160405162461bcd60e51b81526004016102039190610f00565b6126b48062000f3483390190565b6001600160a01b038116811461099257600080fd5b600060208284031215610cc657600080fd5b8135610b2081610c9f565b6020808252825182820181905260009190848201906040850190845b81811015610d125783516001600160a01b031683529284019291840191600101610ced565b50909695505050505050565b600080600060408486031215610d3357600080fd5b833567ffffffffffffffff80821115610d4b57600080fd5b818601915086601f830112610d5f57600080fd5b813581811115610d6e57600080fd5b8760208260051b8501011115610d8357600080fd5b60209283019550935050840135610d9981610c9f565b809150509250925092565b60008060408385031215610db757600080fd5b8235610dc281610c9f565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610e2d57600080fd5b8151610b2081610c9f565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610e6257610e62610e38565b5060010190565b600082821015610e7b57610e7b610e38565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215610ea857600080fd5b81518015158114610b2057600080fd5b60005b83811015610ed3578181015183820152602001610ebb565b8381111561055d5750506000910152565b60008251610ef6818460208701610eb8565b9190910192915050565b6020815260008251806020840152610f1f816040850160208701610eb8565b601f01601f1916919091016040019291505056fe60806040523480156200001157600080fd5b50604051620026b4380380620026b48339810160408190526200003491620000ef565b6200003f3362000082565b6000805460ff60a01b1916905560018055600280546001600160a01b039384166001600160a01b031991821617909155600c805492909316911617905562000127565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ea57600080fd5b919050565b600080604083850312156200010357600080fd5b6200010e83620000d2565b91506200011e60208401620000d2565b90509250929050565b61257d80620001376000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806388d04b1e1161013b578063c5639cc6116100b8578063e70b9e271161007c578063e70b9e2714610548578063e9fad8ee14610573578063ea7cbff11461057b578063f1229777146105a4578063f2fde38b146105b757600080fd5b8063c5639cc6146104d7578063cba43fe6146104ea578063da09d19d1461050d578063db518db21461052d578063e5c21aba1461054057600080fd5b8063a694fc3a116100ff578063a694fc3a14610478578063b29a81401461048b578063b66503cf1461049e578063b6d0dcd8146104b1578063bcd11014146104c457600080fd5b806388d04b1e146104105780638da5cb5b146104235780639ce43f90146104345780639f9106d114610454578063a5dc9e1b1461046557600080fd5b80633f4ba83a116101c9578063715018a61161018d578063715018a6146103ba57806372f702f3146103c2578063796b89b9146103ed5780638040c65b146103f35780638456cb591461040857600080fd5b80633f4ba83a146103385780635c975abb146103405780635d9103511461035e578063638634ee1461037e57806370a082311461039157600080fd5b806327b936741161021057806327b93674146102bf5780632ce9aead146102ea5780632e1a7d4d1461030a5780632ee409081461031d5780633d18b9121461033057600080fd5b8063055de2751461024d57806318160ddd14610262578063211dc32d14610279578063221ca18c1461028c5780632378bea6146102ac575b600080fd5b61026061025b366004612217565b6105ca565b005b600d545b6040519081526020015b60405180910390f35b610266610287366004612232565b61074e565b61026661029a366004612217565b60066020526000908152604090205481565b6102606102ba366004612265565b610811565b6102666102cd366004612232565b600a60209081526000928352604080842090915290825290205481565b6102666102f8366004612217565b60086020526000908152604090205481565b61026061031836600461228f565b610918565b61026061032b366004612265565b610a3c565b610260610be3565b610260610d0d565b600054600160a01b900460ff165b6040519015158152602001610270565b61026661036c366004612217565b60076020526000908152604090205481565b61026661038c366004612217565b610d41565b61026661039f366004612217565b6001600160a01b03166000908152600e602052604090205490565b610260610d84565b6002546103d5906001600160a01b031681565b6040516001600160a01b039091168152602001610270565b42610266565b6103fb610db8565b60405161027091906122a8565b610260610e1a565b61026061041e366004612265565b610e4c565b6000546001600160a01b03166103d5565b610266610442366004612217565b60096020526000908152604090205481565b6002546001600160a01b03166103d5565b600c546103d5906001600160a01b031681565b61026061048636600461228f565b610f80565b610260610499366004612265565b6110ce565b6102606104ac366004612265565b6111c3565b6103d56104bf36600461228f565b6115ba565b6102666104d2366004612217565b6115e4565b6102606104e5366004612217565b611612565b61034e6104f8366004612217565b60046020526000908152604090205460ff1681565b61026661051b366004612217565b60056020526000908152604090205481565b61026061053b366004612265565b611690565b600354610266565b610266610556366004612232565b600b60209081526000928352604080842090915290825290205481565b610260611804565b610266610589366004612217565b6001600160a01b031660009081526006602052604090205490565b6102666105b2366004612217565b611825565b6102606105c5366004612217565b6118f4565b600260015414156105f65760405162461bcd60e51b81526004016105ed906122f5565b60405180910390fd5b60026001558060005b6003548110156106ec5760006003828154811061061e5761061e61232c565b6000918252602090912001546001600160a01b0316905061063e81611825565b6001600160a01b03821660009081526009602052604090205561066081610d41565b6001600160a01b038083166000908152600860205260409020919091558316156106d95761068e818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806106e481612358565b9150506105ff565b50600c546001600160a01b031633146107175760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b03821661073d5760405162461bcd60e51b81526004016105ed90612399565b6107468261198f565b505060018055565b6001600160a01b03821660009081526004602052604081205460ff166107765750600061080b565b6001600160a01b038084166000818152600b6020908152604080832094871680845294825280832054938352600a82528083209483529390529190912054670de0b6b3a7640000906107c786611825565b6107d191906123c2565b6001600160a01b0385166000908152600e60205260409020546107f491906123d9565b6107fe91906123f8565b610808919061241a565b90505b92915050565b6000546001600160a01b0316331461083b5760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b03821660009081526004602052604090205460ff166108a35760405162461bcd60e51b815260206004820152601a60248201527f72657761726420746f6b656e206e6f7420737570706f7274656400000000000060448201526064016105ed565b6001600160a01b038216600090815260056020526040902054421161090a5760405162461bcd60e51b815260206004820152601d60248201527f70726576696f75732072657761726473206e6f7420636f6d706c65746500000060448201526064016105ed565b6109148282611b96565b5050565b6002600154141561093b5760405162461bcd60e51b81526004016105ed906122f5565b60026001553360005b600354811015610a31576000600382815481106109635761096361232c565b6000918252602090912001546001600160a01b0316905061098381611825565b6001600160a01b0382166000908152600960205260409020556109a581610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610a1e576109d3818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610a2981612358565b915050610944565b506107463383611be7565b60026001541415610a5f5760405162461bcd60e51b81526004016105ed906122f5565b6002600155600054600160a01b900460ff1615610a8e5760405162461bcd60e51b81526004016105ed90612467565b8160005b600354811015610b7f57600060038281548110610ab157610ab161232c565b6000918252602090912001546001600160a01b03169050610ad181611825565b6001600160a01b038216600090815260096020526040902055610af381610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610b6c57610b21818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610b7781612358565b915050610a92565b50600c546001600160a01b03163314610baa5760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b038316610bd05760405162461bcd60e51b81526004016105ed90612399565b610bda8383611cd0565b50506001805550565b60026001541415610c065760405162461bcd60e51b81526004016105ed906122f5565b60026001553360005b600354811015610cfc57600060038281548110610c2e57610c2e61232c565b6000918252602090912001546001600160a01b03169050610c4e81611825565b6001600160a01b038216600090815260096020526040902055610c7081610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610ce957610c9e818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610cf481612358565b915050610c0f565b50610d063361198f565b5060018055565b6000546001600160a01b03163314610d375760405162461bcd60e51b81526004016105ed90612432565b610d3f611dae565b565b6001600160a01b0381166000908152600560205260408120544210610d7e576001600160a01b03821660009081526005602052604090205461080b565b4261080b565b6000546001600160a01b03163314610dae5760405162461bcd60e51b81526004016105ed90612432565b610d3f6000611e4b565b60606003805480602002602001604051908101604052809291908181526020018280548015610e1057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610df2575b5050505050905090565b6000546001600160a01b03163314610e445760405162461bcd60e51b81526004016105ed90612432565b610d3f611e9b565b6000546001600160a01b03163314610e765760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b03821660009081526004602052604090205460ff1615610edf5760405162461bcd60e51b815260206004820152601f60248201527f7265776172647320746f6b656e20616c726561647920737570706f727465640060448201526064016105ed565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038516908117909155600081815260046020908152604091829020805460ff1916909417909355519081527f0cb82d053b920831ee1dc1e166c0dc6d25c39520802e3767eada637d1e856c65910160405180910390a16109148282611b96565b60026001541415610fa35760405162461bcd60e51b81526004016105ed906122f5565b6002600155600054600160a01b900460ff1615610fd25760405162461bcd60e51b81526004016105ed90612467565b3360005b6003548110156110c357600060038281548110610ff557610ff561232c565b6000918252602090912001546001600160a01b0316905061101581611825565b6001600160a01b03821660009081526009602052604090205561103781610d41565b6001600160a01b038083166000908152600860205260409020919091558316156110b057611065818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806110bb81612358565b915050610fd6565b506107463383611cd0565b6000546001600160a01b031633146110f85760405162461bcd60e51b81526004016105ed90612432565b6002546001600160a01b03838116911614156111565760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f74207769746864726177207374616b696e6720746f6b656e00000060448201526064016105ed565b61117c61116b6000546001600160a01b031690565b6001600160a01b0384169083611f00565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6000546001600160a01b031633146111ed5760405162461bcd60e51b81526004016105ed90612432565b6000805b6003548110156112de576000600382815481106112105761121061232c565b6000918252602090912001546001600160a01b0316905061123081611825565b6001600160a01b03821660009081526009602052604090205561125281610d41565b6001600160a01b038083166000908152600860205260409020919091558316156112cb57611280818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806112d681612358565b9150506111f1565b506001600160a01b03831660009081526004602052604090205460ff166113475760405162461bcd60e51b815260206004820152601a60248201527f72657761726420746f6b656e206e6f7420737570706f7274656400000000000060448201526064016105ed565b6001600160a01b03831660009081526005602052604090205442106113a7576001600160a01b03831660009081526007602052604090205461138990836123f8565b6001600160a01b03841660009081526006602052604090205561143e565b6001600160a01b0383166000908152600560205260408120546113cb9042906123c2565b6001600160a01b038516600090815260066020526040812054919250906113f290836123d9565b6001600160a01b038616600090815260076020526040902054909150611418828661241a565b61142291906123f8565b6001600160a01b03861660009081526006602052604090205550505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a99190612491565b6001600160a01b0385166000908152600760205260409020549091506114cf90826123f8565b6001600160a01b038516600090815260066020526040902054111561152d5760405162461bcd60e51b81526020600482015260146024820152730e4caeec2e4c840e4c2e8ca40e8dede40d0d2ced60631b60448201526064016105ed565b426001600160a01b0385166000908152600860209081526040808320939093556007905220544261155e919061241a565b6001600160a01b0385166000818152600560209081526040918290209390935580519182529181018590527fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29910160405180910390a150505050565b600381815481106115ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260076020908152604080832054600690925282205461080b91906123d9565b6000546001600160a01b0316331461163c5760405162461bcd60e51b81526004016105ed90612432565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd463ca58ea00d3f552e95dc3ea8fa97034bfd2c9d9b13ec245080dfa176feac89060200160405180910390a150565b600260015414156116b35760405162461bcd60e51b81526004016105ed906122f5565b60026001558160005b6003548110156117a9576000600382815481106116db576116db61232c565b6000918252602090912001546001600160a01b031690506116fb81611825565b6001600160a01b03821660009081526009602052604090205561171d81610d41565b6001600160a01b038083166000908152600860205260409020919091558316156117965761174b818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806117a181612358565b9150506116bc565b50600c546001600160a01b031633146117d45760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b0383166117fa5760405162461bcd60e51b81526004016105ed90612399565b610bda8383611be7565b336000908152600e602052604090205461181d90610918565b610d3f610be3565b6001600160a01b03811660009081526004602052604081205460ff1661184d57506000919050565b600d5461187057506001600160a01b031660009081526009602052604090205490565b600d546001600160a01b0383166000908152600660209081526040808320546008909252909120546118a185610d41565b6118ab91906123c2565b6118b591906123d9565b6118c790670de0b6b3a76400006123d9565b6118d191906123f8565b6001600160a01b03831660009081526009602052604090205461080b919061241a565b6000546001600160a01b0316331461191e5760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b0381166119835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ed565b61198c81611e4b565b50565b60005b600354811015610914576000600b6000600384815481106119b5576119b561232c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938716825292909252812054600380549193509084908110611a0257611a0261232c565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a779190612491565b9050600082118015611a895750808211155b15611b81576000600b600060038681548110611aa757611aa761232c565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093891682529290925290205560038054611b1591869185919087908110611af957611af961232c565b6000918252602090912001546001600160a01b03169190611f00565b836001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e60038581548110611b5357611b5361232c565b60009182526020918290200154604080516001600160a01b0390921682529181018690520160405180910390a25b50508080611b8e90612358565b915050611992565b6001600160a01b038216600081815260076020908152604091829020849055815192835282018390527fad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f4954591016111b7565b60008111611c285760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105ed565b80600d54611c3691906123c2565b600d556001600160a01b0382166000908152600e6020526040902054611c5d9082906123c2565b6001600160a01b038084166000908152600e6020526040902091909155600254611c8991163383611f00565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051611cc491815260200190565b60405180910390a25050565b60008111611d115760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105ed565b80600d54611d1f919061241a565b600d556001600160a01b0382166000908152600e6020526040902054611d4690829061241a565b6001600160a01b038084166000908152600e6020526040902091909155600254611d739116333084611f68565b816001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82604051611cc491815260200190565b600054600160a01b900460ff16611dfe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ed565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615611ec55760405162461bcd60e51b81526004016105ed90612467565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e2e3390565b6040516001600160a01b038316602482015260448101829052611f6390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fa6565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fa09085906323b872dd60e01b90608401611f2c565b50505050565b6000611ffb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120789092919063ffffffff16565b805190915015611f63578080602001905181019061201991906124aa565b611f635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ed565b60606120878484600085612091565b90505b9392505050565b6060824710156120f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ed565b6001600160a01b0385163b6121495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ed565b600080866001600160a01b0316858760405161216591906124f8565b60006040518083038185875af1925050503d80600081146121a2576040519150601f19603f3d011682016040523d82523d6000602084013e6121a7565b606091505b50915091506121b78282866121c2565b979650505050505050565b606083156121d157508161208a565b8251156121e15782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612514565b80356001600160a01b038116811461221257600080fd5b919050565b60006020828403121561222957600080fd5b610808826121fb565b6000806040838503121561224557600080fd5b61224e836121fb565b915061225c602084016121fb565b90509250929050565b6000806040838503121561227857600080fd5b612281836121fb565b946020939093013593505050565b6000602082840312156122a157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156122e95783516001600160a01b0316835292840192918401916001016122c4565b50909695505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561236c5761236c612342565b5060010190565b6020808252600c908201526b1d5b985d5d1a1bdc9a5e995960a21b604082015260600190565b6020808252600f908201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b604082015260600190565b6000828210156123d4576123d4612342565b500390565b60008160001904831182151516156123f3576123f3612342565b500290565b60008261241557634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561242d5761242d612342565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156124a357600080fd5b5051919050565b6000602082840312156124bc57600080fd5b8151801515811461208a57600080fd5b60005b838110156124e75781810151838201526020016124cf565b83811115611fa05750506000910152565b6000825161250a8184602087016124cc565b9190910192915050565b60208152600082518060208401526125338160408501602087016124cc565b601f01601f1916919091016040019291505056fea2646970667358221220fbe7ee5dd4cdf661a2389eedbfb3e72e7d060358a64dbe07036e6fd5ff11014764736f6c634300080c0033a26469706673582212203c4b0add2ed487e98300cb4846e7853ef5113f109d89c6e839ea8e482ecef11c64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063918e4c0d11610071578063918e4c0d1461014f578063ce5f8c9714610164578063d5a1e66a14610177578063e90310be1461018a578063eb9253c0146101b3578063f2fde38b146101c657600080fd5b8063054a0fd3146100ae57806321efe200146100c457806329a71c3c14610108578063715018a6146101345780638da5cb5b1461013e575b600080fd5b6001546040519081526020015b60405180910390f35b6100f06100d2366004610cb4565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b0390911681526020016100bb565b6100f0610116366004610cb4565b6001600160a01b039081166000908152600360205260409020541690565b61013c6101d9565b005b6000546001600160a01b03166100f0565b610157610218565b6040516100bb9190610cd1565b61013c610172366004610d1e565b61027a565b61013c610185366004610cb4565b610563565b6100f0610198366004610cb4565b6003602052600090815260409020546001600160a01b031681565b61013c6101c1366004610da4565b610864565b61013c6101d4366004610cb4565b6108fa565b6000546001600160a01b0316331461020c5760405162461bcd60e51b815260040161020390610dd0565b60405180910390fd5b6102166000610995565b565b6060600180548060200260200160405190810160405280929190818152602001828054801561027057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610252575b5050505050905090565b6000546001600160a01b031633146102a45760405162461bcd60e51b815260040161020390610dd0565b60005b8281101561055d5760008484838181106102c3576102c3610e05565b90506020020160208101906102d89190610cb4565b90506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e9190610e1b565b90506001600160a01b03811661038b5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610203565b6001600160a01b0382811660009081526002602052604090205416156104025760405162461bcd60e51b815260206004820152602660248201527f7374616b696e67207265776172647320636f6e747261637420616c726561647960448201526508195e1a5cdd60d21b6064820152608401610203565b6000828560405161041290610c91565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610445573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b5050600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038086166001600160a01b0319928316811790935587811660008181526002602090815260408083208054871688179055938a168252600390528281208054909416821790935590519094509192507f53fd298a981eaaf793d11bd90cef46decbc420dde2b8d8d47323895b35cba34391a3505050808061055590610e4e565b9150506102a7565b50505050565b6000546001600160a01b0316331461058d5760405162461bcd60e51b815260040161020390610dd0565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610e1b565b90506001600160a01b03811661063e5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610203565b6001600160a01b03828116600090815260026020526040902054166106b05760405162461bcd60e51b815260206004820152602260248201527f7374616b696e67207265776172647320636f6e7472616374206e6f74206578696044820152611cdd60f21b6064820152608401610203565b60005b6001548110156107f657600181815481106106d0576106d0610e05565b60009182526020808320909101546001600160a01b03868116845260029092526040909220548116911614156107e4576001805461070f908290610e69565b8154811061071f5761071f610e05565b600091825260209091200154600180546001600160a01b03909216918390811061074b5761074b610e05565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560018054610783908290610e69565b8154811061079357610793610e05565b600091825260209091200180546001600160a01b031916905560018054806107bd576107bd610e80565b600082815260209020810160001990810180546001600160a01b03191690550190556107f6565b806107ee81610e4e565b9150506106b3565b506001600160a01b03808316600081815260026020908152604080832080546001600160a01b0319908116909155948616835260039091528082208054909416909355915190917f1748d85e1878b20ec727ef2f7992b532d1b6c2485596f909f8f5027bc70f354d91a25050565b6000546001600160a01b0316331461088e5760405162461bcd60e51b815260040161020390610dd0565b6108b46108a36000546001600160a01b031690565b6001600160a01b03841690836109e5565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910160405180910390a15050565b6000546001600160a01b031633146109245760405162461bcd60e51b815260040161020390610dd0565b6001600160a01b0381166109895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610203565b61099281610995565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a37908490610a3c565b505050565b6000610a91826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b0e9092919063ffffffff16565b805190915015610a375780806020019051810190610aaf9190610e96565b610a375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610203565b6060610b1d8484600085610b27565b90505b9392505050565b606082471015610b885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610203565b6001600160a01b0385163b610bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610203565b600080866001600160a01b03168587604051610bfb9190610ee4565b60006040518083038185875af1925050503d8060008114610c38576040519150601f19603f3d011682016040523d82523d6000602084013e610c3d565b606091505b5091509150610c4d828286610c58565b979650505050505050565b60608315610c67575081610b20565b825115610c775782518084602001fd5b8160405162461bcd60e51b81526004016102039190610f00565b6126b48062000f3483390190565b6001600160a01b038116811461099257600080fd5b600060208284031215610cc657600080fd5b8135610b2081610c9f565b6020808252825182820181905260009190848201906040850190845b81811015610d125783516001600160a01b031683529284019291840191600101610ced565b50909695505050505050565b600080600060408486031215610d3357600080fd5b833567ffffffffffffffff80821115610d4b57600080fd5b818601915086601f830112610d5f57600080fd5b813581811115610d6e57600080fd5b8760208260051b8501011115610d8357600080fd5b60209283019550935050840135610d9981610c9f565b809150509250925092565b60008060408385031215610db757600080fd5b8235610dc281610c9f565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610e2d57600080fd5b8151610b2081610c9f565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610e6257610e62610e38565b5060010190565b600082821015610e7b57610e7b610e38565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215610ea857600080fd5b81518015158114610b2057600080fd5b60005b83811015610ed3578181015183820152602001610ebb565b8381111561055d5750506000910152565b60008251610ef6818460208701610eb8565b9190910192915050565b6020815260008251806020840152610f1f816040850160208701610eb8565b601f01601f1916919091016040019291505056fe60806040523480156200001157600080fd5b50604051620026b4380380620026b48339810160408190526200003491620000ef565b6200003f3362000082565b6000805460ff60a01b1916905560018055600280546001600160a01b039384166001600160a01b031991821617909155600c805492909316911617905562000127565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ea57600080fd5b919050565b600080604083850312156200010357600080fd5b6200010e83620000d2565b91506200011e60208401620000d2565b90509250929050565b61257d80620001376000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806388d04b1e1161013b578063c5639cc6116100b8578063e70b9e271161007c578063e70b9e2714610548578063e9fad8ee14610573578063ea7cbff11461057b578063f1229777146105a4578063f2fde38b146105b757600080fd5b8063c5639cc6146104d7578063cba43fe6146104ea578063da09d19d1461050d578063db518db21461052d578063e5c21aba1461054057600080fd5b8063a694fc3a116100ff578063a694fc3a14610478578063b29a81401461048b578063b66503cf1461049e578063b6d0dcd8146104b1578063bcd11014146104c457600080fd5b806388d04b1e146104105780638da5cb5b146104235780639ce43f90146104345780639f9106d114610454578063a5dc9e1b1461046557600080fd5b80633f4ba83a116101c9578063715018a61161018d578063715018a6146103ba57806372f702f3146103c2578063796b89b9146103ed5780638040c65b146103f35780638456cb591461040857600080fd5b80633f4ba83a146103385780635c975abb146103405780635d9103511461035e578063638634ee1461037e57806370a082311461039157600080fd5b806327b936741161021057806327b93674146102bf5780632ce9aead146102ea5780632e1a7d4d1461030a5780632ee409081461031d5780633d18b9121461033057600080fd5b8063055de2751461024d57806318160ddd14610262578063211dc32d14610279578063221ca18c1461028c5780632378bea6146102ac575b600080fd5b61026061025b366004612217565b6105ca565b005b600d545b6040519081526020015b60405180910390f35b610266610287366004612232565b61074e565b61026661029a366004612217565b60066020526000908152604090205481565b6102606102ba366004612265565b610811565b6102666102cd366004612232565b600a60209081526000928352604080842090915290825290205481565b6102666102f8366004612217565b60086020526000908152604090205481565b61026061031836600461228f565b610918565b61026061032b366004612265565b610a3c565b610260610be3565b610260610d0d565b600054600160a01b900460ff165b6040519015158152602001610270565b61026661036c366004612217565b60076020526000908152604090205481565b61026661038c366004612217565b610d41565b61026661039f366004612217565b6001600160a01b03166000908152600e602052604090205490565b610260610d84565b6002546103d5906001600160a01b031681565b6040516001600160a01b039091168152602001610270565b42610266565b6103fb610db8565b60405161027091906122a8565b610260610e1a565b61026061041e366004612265565b610e4c565b6000546001600160a01b03166103d5565b610266610442366004612217565b60096020526000908152604090205481565b6002546001600160a01b03166103d5565b600c546103d5906001600160a01b031681565b61026061048636600461228f565b610f80565b610260610499366004612265565b6110ce565b6102606104ac366004612265565b6111c3565b6103d56104bf36600461228f565b6115ba565b6102666104d2366004612217565b6115e4565b6102606104e5366004612217565b611612565b61034e6104f8366004612217565b60046020526000908152604090205460ff1681565b61026661051b366004612217565b60056020526000908152604090205481565b61026061053b366004612265565b611690565b600354610266565b610266610556366004612232565b600b60209081526000928352604080842090915290825290205481565b610260611804565b610266610589366004612217565b6001600160a01b031660009081526006602052604090205490565b6102666105b2366004612217565b611825565b6102606105c5366004612217565b6118f4565b600260015414156105f65760405162461bcd60e51b81526004016105ed906122f5565b60405180910390fd5b60026001558060005b6003548110156106ec5760006003828154811061061e5761061e61232c565b6000918252602090912001546001600160a01b0316905061063e81611825565b6001600160a01b03821660009081526009602052604090205561066081610d41565b6001600160a01b038083166000908152600860205260409020919091558316156106d95761068e818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806106e481612358565b9150506105ff565b50600c546001600160a01b031633146107175760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b03821661073d5760405162461bcd60e51b81526004016105ed90612399565b6107468261198f565b505060018055565b6001600160a01b03821660009081526004602052604081205460ff166107765750600061080b565b6001600160a01b038084166000818152600b6020908152604080832094871680845294825280832054938352600a82528083209483529390529190912054670de0b6b3a7640000906107c786611825565b6107d191906123c2565b6001600160a01b0385166000908152600e60205260409020546107f491906123d9565b6107fe91906123f8565b610808919061241a565b90505b92915050565b6000546001600160a01b0316331461083b5760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b03821660009081526004602052604090205460ff166108a35760405162461bcd60e51b815260206004820152601a60248201527f72657761726420746f6b656e206e6f7420737570706f7274656400000000000060448201526064016105ed565b6001600160a01b038216600090815260056020526040902054421161090a5760405162461bcd60e51b815260206004820152601d60248201527f70726576696f75732072657761726473206e6f7420636f6d706c65746500000060448201526064016105ed565b6109148282611b96565b5050565b6002600154141561093b5760405162461bcd60e51b81526004016105ed906122f5565b60026001553360005b600354811015610a31576000600382815481106109635761096361232c565b6000918252602090912001546001600160a01b0316905061098381611825565b6001600160a01b0382166000908152600960205260409020556109a581610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610a1e576109d3818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610a2981612358565b915050610944565b506107463383611be7565b60026001541415610a5f5760405162461bcd60e51b81526004016105ed906122f5565b6002600155600054600160a01b900460ff1615610a8e5760405162461bcd60e51b81526004016105ed90612467565b8160005b600354811015610b7f57600060038281548110610ab157610ab161232c565b6000918252602090912001546001600160a01b03169050610ad181611825565b6001600160a01b038216600090815260096020526040902055610af381610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610b6c57610b21818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610b7781612358565b915050610a92565b50600c546001600160a01b03163314610baa5760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b038316610bd05760405162461bcd60e51b81526004016105ed90612399565b610bda8383611cd0565b50506001805550565b60026001541415610c065760405162461bcd60e51b81526004016105ed906122f5565b60026001553360005b600354811015610cfc57600060038281548110610c2e57610c2e61232c565b6000918252602090912001546001600160a01b03169050610c4e81611825565b6001600160a01b038216600090815260096020526040902055610c7081610d41565b6001600160a01b03808316600090815260086020526040902091909155831615610ce957610c9e818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b5080610cf481612358565b915050610c0f565b50610d063361198f565b5060018055565b6000546001600160a01b03163314610d375760405162461bcd60e51b81526004016105ed90612432565b610d3f611dae565b565b6001600160a01b0381166000908152600560205260408120544210610d7e576001600160a01b03821660009081526005602052604090205461080b565b4261080b565b6000546001600160a01b03163314610dae5760405162461bcd60e51b81526004016105ed90612432565b610d3f6000611e4b565b60606003805480602002602001604051908101604052809291908181526020018280548015610e1057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610df2575b5050505050905090565b6000546001600160a01b03163314610e445760405162461bcd60e51b81526004016105ed90612432565b610d3f611e9b565b6000546001600160a01b03163314610e765760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b03821660009081526004602052604090205460ff1615610edf5760405162461bcd60e51b815260206004820152601f60248201527f7265776172647320746f6b656e20616c726561647920737570706f727465640060448201526064016105ed565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038516908117909155600081815260046020908152604091829020805460ff1916909417909355519081527f0cb82d053b920831ee1dc1e166c0dc6d25c39520802e3767eada637d1e856c65910160405180910390a16109148282611b96565b60026001541415610fa35760405162461bcd60e51b81526004016105ed906122f5565b6002600155600054600160a01b900460ff1615610fd25760405162461bcd60e51b81526004016105ed90612467565b3360005b6003548110156110c357600060038281548110610ff557610ff561232c565b6000918252602090912001546001600160a01b0316905061101581611825565b6001600160a01b03821660009081526009602052604090205561103781610d41565b6001600160a01b038083166000908152600860205260409020919091558316156110b057611065818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806110bb81612358565b915050610fd6565b506107463383611cd0565b6000546001600160a01b031633146110f85760405162461bcd60e51b81526004016105ed90612432565b6002546001600160a01b03838116911614156111565760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f74207769746864726177207374616b696e6720746f6b656e00000060448201526064016105ed565b61117c61116b6000546001600160a01b031690565b6001600160a01b0384169083611f00565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6000546001600160a01b031633146111ed5760405162461bcd60e51b81526004016105ed90612432565b6000805b6003548110156112de576000600382815481106112105761121061232c565b6000918252602090912001546001600160a01b0316905061123081611825565b6001600160a01b03821660009081526009602052604090205561125281610d41565b6001600160a01b038083166000908152600860205260409020919091558316156112cb57611280818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806112d681612358565b9150506111f1565b506001600160a01b03831660009081526004602052604090205460ff166113475760405162461bcd60e51b815260206004820152601a60248201527f72657761726420746f6b656e206e6f7420737570706f7274656400000000000060448201526064016105ed565b6001600160a01b03831660009081526005602052604090205442106113a7576001600160a01b03831660009081526007602052604090205461138990836123f8565b6001600160a01b03841660009081526006602052604090205561143e565b6001600160a01b0383166000908152600560205260408120546113cb9042906123c2565b6001600160a01b038516600090815260066020526040812054919250906113f290836123d9565b6001600160a01b038616600090815260076020526040902054909150611418828661241a565b61142291906123f8565b6001600160a01b03861660009081526006602052604090205550505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a99190612491565b6001600160a01b0385166000908152600760205260409020549091506114cf90826123f8565b6001600160a01b038516600090815260066020526040902054111561152d5760405162461bcd60e51b81526020600482015260146024820152730e4caeec2e4c840e4c2e8ca40e8dede40d0d2ced60631b60448201526064016105ed565b426001600160a01b0385166000908152600860209081526040808320939093556007905220544261155e919061241a565b6001600160a01b0385166000818152600560209081526040918290209390935580519182529181018590527fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29910160405180910390a150505050565b600381815481106115ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260076020908152604080832054600690925282205461080b91906123d9565b6000546001600160a01b0316331461163c5760405162461bcd60e51b81526004016105ed90612432565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd463ca58ea00d3f552e95dc3ea8fa97034bfd2c9d9b13ec245080dfa176feac89060200160405180910390a150565b600260015414156116b35760405162461bcd60e51b81526004016105ed906122f5565b60026001558160005b6003548110156117a9576000600382815481106116db576116db61232c565b6000918252602090912001546001600160a01b031690506116fb81611825565b6001600160a01b03821660009081526009602052604090205561171d81610d41565b6001600160a01b038083166000908152600860205260409020919091558316156117965761174b818461074e565b6001600160a01b038083166000818152600b60209081526040808320948916808452948252808320959095559181526009825283812054600a83528482209382529290915291909120555b50806117a181612358565b9150506116bc565b50600c546001600160a01b031633146117d45760405162461bcd60e51b81526004016105ed90612373565b6001600160a01b0383166117fa5760405162461bcd60e51b81526004016105ed90612399565b610bda8383611be7565b336000908152600e602052604090205461181d90610918565b610d3f610be3565b6001600160a01b03811660009081526004602052604081205460ff1661184d57506000919050565b600d5461187057506001600160a01b031660009081526009602052604090205490565b600d546001600160a01b0383166000908152600660209081526040808320546008909252909120546118a185610d41565b6118ab91906123c2565b6118b591906123d9565b6118c790670de0b6b3a76400006123d9565b6118d191906123f8565b6001600160a01b03831660009081526009602052604090205461080b919061241a565b6000546001600160a01b0316331461191e5760405162461bcd60e51b81526004016105ed90612432565b6001600160a01b0381166119835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ed565b61198c81611e4b565b50565b60005b600354811015610914576000600b6000600384815481106119b5576119b561232c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938716825292909252812054600380549193509084908110611a0257611a0261232c565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a779190612491565b9050600082118015611a895750808211155b15611b81576000600b600060038681548110611aa757611aa761232c565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093891682529290925290205560038054611b1591869185919087908110611af957611af961232c565b6000918252602090912001546001600160a01b03169190611f00565b836001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e60038581548110611b5357611b5361232c565b60009182526020918290200154604080516001600160a01b0390921682529181018690520160405180910390a25b50508080611b8e90612358565b915050611992565b6001600160a01b038216600081815260076020908152604091829020849055815192835282018390527fad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f4954591016111b7565b60008111611c285760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105ed565b80600d54611c3691906123c2565b600d556001600160a01b0382166000908152600e6020526040902054611c5d9082906123c2565b6001600160a01b038084166000908152600e6020526040902091909155600254611c8991163383611f00565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051611cc491815260200190565b60405180910390a25050565b60008111611d115760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105ed565b80600d54611d1f919061241a565b600d556001600160a01b0382166000908152600e6020526040902054611d4690829061241a565b6001600160a01b038084166000908152600e6020526040902091909155600254611d739116333084611f68565b816001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82604051611cc491815260200190565b600054600160a01b900460ff16611dfe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ed565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615611ec55760405162461bcd60e51b81526004016105ed90612467565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e2e3390565b6040516001600160a01b038316602482015260448101829052611f6390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fa6565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fa09085906323b872dd60e01b90608401611f2c565b50505050565b6000611ffb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120789092919063ffffffff16565b805190915015611f63578080602001905181019061201991906124aa565b611f635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ed565b60606120878484600085612091565b90505b9392505050565b6060824710156120f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ed565b6001600160a01b0385163b6121495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ed565b600080866001600160a01b0316858760405161216591906124f8565b60006040518083038185875af1925050503d80600081146121a2576040519150601f19603f3d011682016040523d82523d6000602084013e6121a7565b606091505b50915091506121b78282866121c2565b979650505050505050565b606083156121d157508161208a565b8251156121e15782518084602001fd5b8160405162461bcd60e51b81526004016105ed9190612514565b80356001600160a01b038116811461221257600080fd5b919050565b60006020828403121561222957600080fd5b610808826121fb565b6000806040838503121561224557600080fd5b61224e836121fb565b915061225c602084016121fb565b90509250929050565b6000806040838503121561227857600080fd5b612281836121fb565b946020939093013593505050565b6000602082840312156122a157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156122e95783516001600160a01b0316835292840192918401916001016122c4565b50909695505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561236c5761236c612342565b5060010190565b6020808252600c908201526b1d5b985d5d1a1bdc9a5e995960a21b604082015260600190565b6020808252600f908201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b604082015260600190565b6000828210156123d4576123d4612342565b500390565b60008160001904831182151516156123f3576123f3612342565b500290565b60008261241557634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561242d5761242d612342565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156124a357600080fd5b5051919050565b6000602082840312156124bc57600080fd5b8151801515811461208a57600080fd5b60005b838110156124e75781810151838201526020016124cf565b83811115611fa05750506000910152565b6000825161250a8184602087016124cc565b9190910192915050565b60208152600082518060208401526125338160408501602087016124cc565b601f01601f1916919091016040019291505056fea2646970667358221220fbe7ee5dd4cdf661a2389eedbfb3e72e7d060358a64dbe07036e6fd5ff11014764736f6c634300080c0033a26469706673582212203c4b0add2ed487e98300cb4846e7853ef5113f109d89c6e839ea8e482ecef11c64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createStakingRewards(address[],address)": {
        "params": {
          "stakingTokens": "The staking token list"
        }
      },
      "getAllStakingRewards()": {
        "returns": {
          "_0": "All the staking reward contracts"
        }
      },
      "getStakingRewards(address)": {
        "params": {
          "stakingToken": "The staking token"
        },
        "returns": {
          "_0": "The staking reward contracts"
        }
      },
      "getStakingRewardsCount()": {
        "returns": {
          "_0": "The amount of staking reward contracts"
        }
      },
      "getStakingToken(address)": {
        "params": {
          "underlying": "The underlying token"
        },
        "returns": {
          "_0": "The staking token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeStakingRewards(address)": {
        "params": {
          "stakingToken": "The staking token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "seize(address,uint256)": {
        "params": {
          "amount": "The amount",
          "token": "The token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "StakingRewardsCreated(address,address)": {
        "notice": "Emitted when a staking rewards contract is deployed"
      },
      "StakingRewardsRemoved(address)": {
        "notice": "Emitted when a staking rewards contract is removed"
      },
      "TokenSeized(address,uint256)": {
        "notice": "Emitted when tokens are seized"
      }
    },
    "kind": "user",
    "methods": {
      "_stakingTokenMap(address)": {
        "notice": "The underlying - staking token mapping"
      },
      "createStakingRewards(address[],address)": {
        "notice": "Create staking reward contracts."
      },
      "getAllStakingRewards()": {
        "notice": "Return all the staking reward contracts."
      },
      "getStakingRewards(address)": {
        "notice": "Return the staking rewards contract of a given staking token"
      },
      "getStakingRewardsCount()": {
        "notice": "Return the amount of staking reward contracts."
      },
      "getStakingToken(address)": {
        "notice": "Return the staking token of a given underlying token"
      },
      "removeStakingRewards(address)": {
        "notice": "Remove a staking reward contract."
      },
      "seize(address,uint256)": {
        "notice": "Seize tokens in this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2559,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_stakingRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2564,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_stakingRewardsMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2569,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_stakingTokenMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}