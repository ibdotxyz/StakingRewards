{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ITokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITokenInterface {\n    function underlying() external view returns (address);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n}\n"
    },
    "contracts/StakingRewardsHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ITokenInterface.sol\";\nimport \"./interfaces/StakingRewardsInterface.sol\";\nimport \"./interfaces/StakingRewardsFactoryInterface.sol\";\n\ncontract StakingRewardsHelper is Ownable {\n    using SafeERC20 for IERC20;\n\n    StakingRewardsFactoryInterface public immutable factory;\n\n    /**\n     * @notice Emitted when tokens are seized\n     */\n    event TokenSeized(address token, uint256 amount);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _factory) {\n        factory = StakingRewardsFactoryInterface(_factory);\n    }\n\n    /* ========== VIEWS ========== */\n\n    struct RewardTokenInfo {\n        address rewardTokenAddress;\n        string rewardTokenSymbol;\n        uint8 rewardTokenDecimals;\n    }\n\n    struct RewardClaimable {\n        RewardTokenInfo rewardToken;\n        uint256 amount;\n    }\n\n    struct UserStaked {\n        address stakingTokenAddress;\n        uint256 balance;\n    }\n\n    struct StakingInfo {\n        address stakingTokenAddress;\n        uint256 totalSupply;\n        uint256 supplyRatePerBlock;\n        uint256 exchangeRate;\n        RewardRate[] rewardRates;\n    }\n\n    struct RewardRate {\n        address rewardTokenAddress;\n        uint256 rate;\n    }\n\n    /**\n     * @notice Getthe reward token info\n     * @param rewardToken The reward token\n     * @return The reward token info\n     */\n    function getRewardTokenInfo(address rewardToken)\n        public\n        view\n        returns (RewardTokenInfo memory)\n    {\n        return\n            RewardTokenInfo({\n                rewardTokenAddress: rewardToken,\n                rewardTokenSymbol: IERC20Metadata(rewardToken).symbol(),\n                rewardTokenDecimals: IERC20Metadata(rewardToken).decimals()\n            });\n    }\n\n    /**\n     * @notice Get user claimable rewards\n     * @param account The account\n     * @param rewardTokens The list of reward tokens\n     * @return The list of user claimable rewards\n     */\n    function getUserClaimableRewards(\n        address account,\n        address[] calldata rewardTokens\n    ) public view returns (RewardClaimable[] memory) {\n        RewardClaimable[] memory rewardsClaimable = new RewardClaimable[](\n            rewardTokens.length\n        );\n\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            uint256 amount;\n            for (uint256 j = 0; j < allStakingRewards.length; j++) {\n                address stakingRewards = allStakingRewards[j];\n                amount += StakingRewardsInterface(stakingRewards).earned(\n                    rewardTokens[i],\n                    account\n                );\n            }\n\n            rewardsClaimable[i] = RewardClaimable({\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\n                amount: amount\n            });\n        }\n        return rewardsClaimable;\n    }\n\n    /**\n     * @notice Get user staked info\n     * @param account The account\n     * @return The list of user staked info\n     */\n    function getUserStaked(address account)\n        public\n        view\n        returns (UserStaked[] memory)\n    {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        UserStaked[] memory stakedInfo = new UserStaked[](\n            allStakingRewards.length\n        );\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\n            address stakingRewards = allStakingRewards[i];\n            address stakingToken = StakingRewardsInterface(stakingRewards)\n                .getStakingToken();\n            uint256 balance = StakingRewardsInterface(stakingRewards).balanceOf(\n                account\n            );\n            stakedInfo[i] = UserStaked({\n                stakingTokenAddress: stakingToken,\n                balance: balance\n            });\n        }\n        return stakedInfo;\n    }\n\n    /**\n     * @notice Get all the staking info\n     * @return The list of staking info\n     */\n    function getStakingInfo() public view returns (StakingInfo[] memory) {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        StakingInfo[] memory stakingRewardRates = new StakingInfo[](\n            allStakingRewards.length\n        );\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\n            address stakingRewards = allStakingRewards[i];\n            address[] memory allRewardTokens = StakingRewardsInterface(\n                stakingRewards\n            ).getAllRewardsTokens();\n\n            RewardRate[] memory rewardRates = new RewardRate[](\n                allRewardTokens.length\n            );\n            for (uint256 j = 0; j < allRewardTokens.length; j++) {\n                address rewardToken = allRewardTokens[j];\n                uint256 rate = StakingRewardsInterface(stakingRewards)\n                    .getRewardRate(rewardToken);\n                rewardRates[j] = RewardRate({\n                    rewardTokenAddress: rewardToken,\n                    rate: rate\n                });\n            }\n\n            address stakingToken = StakingRewardsInterface(stakingRewards)\n                .getStakingToken();\n            uint256 totalSupply = StakingRewardsInterface(stakingRewards)\n                .totalSupply();\n            uint256 supplyRatePerBlock = ITokenInterface(stakingToken)\n                .supplyRatePerBlock();\n            uint256 exchangeRate = ITokenInterface(stakingToken)\n                .exchangeRateStored();\n            stakingRewardRates[i] = StakingInfo({\n                stakingTokenAddress: stakingToken,\n                totalSupply: totalSupply,\n                supplyRatePerBlock: supplyRatePerBlock,\n                exchangeRate: exchangeRate,\n                rewardRates: rewardRates\n            });\n        }\n        return stakingRewardRates;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Mint and stake tokens into staking rewards\n     * @param underlying The underlying token\n     * @param amount The amount\n     */\n    function stake(address underlying, uint256 amount) public {\n        require(amount > 0, \"invalid amount\");\n        address stakingToken = factory.getStakingToken(underlying);\n        require(stakingToken != address(0), \"invalid staking token\");\n        address stakingRewards = factory.getStakingRewards(stakingToken);\n        require(stakingRewards != address(0), \"staking rewards not exist\");\n\n        // Get funds from user.\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Mint\n        IERC20(underlying).approve(stakingToken, amount);\n        require(ITokenInterface(stakingToken).mint(amount) == 0, \"mint failed\");\n\n        // Stake to staking rewards.\n        uint256 balance = IERC20(stakingToken).balanceOf(address(this));\n        IERC20(stakingToken).approve(stakingRewards, balance);\n        StakingRewardsInterface(stakingRewards).stakeFor(msg.sender, balance);\n\n        assert(IERC20(stakingToken).balanceOf(address(this)) == 0);\n    }\n\n    /**\n     * @notice Unstake tokens from staking rewards and redeem\n     * @param stakingRewards The staking rewards\n     * @param amount The amount\n     */\n    function unstake(address stakingRewards, uint256 amount) public {\n        require(amount > 0, \"invalid amount\");\n        address stakingToken = StakingRewardsInterface(stakingRewards)\n            .getStakingToken();\n        require(stakingToken != address(0), \"invalid staking token\");\n        address underlying = ITokenInterface(stakingToken).underlying();\n        require(underlying != address(0), \"invalid underlying\");\n\n        // Withdraw from staking rewards.\n        StakingRewardsInterface(stakingRewards).withdrawFor(msg.sender, amount);\n\n        // Redeem\n        require(\n            ITokenInterface(stakingToken).redeem(amount) == 0,\n            \"redeem failed\"\n        );\n\n        // Send funds to user.\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\n        IERC20(underlying).transfer(msg.sender, balance);\n\n        assert(IERC20(underlying).balanceOf(address(this)) == 0);\n    }\n\n    /**\n     * @notice Exit all staking rewards\n     */\n    function exitAll() public {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        exit(allStakingRewards);\n    }\n\n    /**\n     * @notice Exit staking rewards\n     * @param stakingRewards The list of staking rewards\n     */\n    function exit(address[] memory stakingRewards) public {\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\n            uint256 balance = StakingRewardsInterface(stakingRewards[i])\n                .balanceOf(msg.sender);\n            unstake(stakingRewards[i], balance);\n            StakingRewardsInterface(stakingRewards[i]).getRewardFor(msg.sender);\n        }\n    }\n\n    /**\n     * @notice Claim all rewards\n     */\n    function claimAllRewards() public {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        claimRewards(allStakingRewards);\n    }\n\n    /**\n     * @notice Claim rewards by given staking rewards\n     * @param stakingRewards The list of staking rewards\n     */\n    function claimRewards(address[] memory stakingRewards) public {\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\n            StakingRewardsInterface(stakingRewards[i]).getRewardFor(msg.sender);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /**\n     * @notice Seize tokens in this contract.\n     * @param token The token\n     * @param amount The amount\n     */\n    function seize(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n        emit TokenSeized(token, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/StakingRewardsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface StakingRewardsInterface {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function lastTimeRewardApplicable(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function rewardPerToken(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function earned(address _rewardsToken, address account)\n        external\n        view\n        returns (uint256);\n\n    function getRewardRate(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function getRewardForDuration(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function getRewardsTokenCount() external view returns (uint256);\n\n    function getAllRewardsTokens() external view returns (address[] memory);\n\n    function getStakingToken() external view returns (address);\n\n    function stake(uint256 amount) external;\n\n    function stakeFor(address account, uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawFor(address account, uint256 amount) external;\n\n    function getReward() external;\n\n    function getRewardFor(address account) external;\n\n    function exit() external;\n}\n"
    },
    "contracts/interfaces/StakingRewardsFactoryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface StakingRewardsFactoryInterface {\n    function getStakingRewardsCount() external view returns (uint256);\n\n    function getAllStakingRewards() external view returns (address[] memory);\n\n    function getStakingRewards(address stakingToken)\n        external\n        view\n        returns (address);\n\n    function getStakingToken(address underlying)\n        external\n        view\n        returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/StakingRewardsFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./StakingRewards.sol\";\nimport \"./interfaces/ITokenInterface.sol\";\nimport \"./interfaces/StakingRewardsFactoryInterface.sol\";\n\ncontract StakingRewardsFactory is Ownable, StakingRewardsFactoryInterface {\n    using SafeERC20 for IERC20;\n\n    /// @notice The list of staking rewards contract\n    address[] private _stakingRewards;\n\n    /// @notice The staking token - staking rewards contract mapping\n    mapping(address => address) private _stakingRewardsMap;\n\n    /// @notice The underlying - staking token mapping\n    mapping(address => address) public _stakingTokenMap;\n\n    /**\n     * @notice Emitted when a staking rewards contract is deployed\n     */\n    event StakingRewardsCreated(\n        address indexed stakingRewards,\n        address indexed stakingToken\n    );\n\n    /**\n     * @notice Emitted when a staking rewards contract is removed\n     */\n    event StakingRewardsRemoved(address indexed stakingToken);\n\n    /**\n     * @notice Emitted when tokens are seized\n     */\n    event TokenSeized(address token, uint256 amount);\n\n    /**\n     * @notice Return the amount of staking reward contracts.\n     * @return The amount of staking reward contracts\n     */\n    function getStakingRewardsCount() external view returns (uint256) {\n        return _stakingRewards.length;\n    }\n\n    /**\n     * @notice Return all the staking reward contracts.\n     * @return All the staking reward contracts\n     */\n    function getAllStakingRewards() external view returns (address[] memory) {\n        return _stakingRewards;\n    }\n\n    /**\n     * @notice Return the staking rewards contract of a given staking token\n     * @param stakingToken The staking token\n     * @return The staking reward contracts\n     */\n    function getStakingRewards(address stakingToken)\n        external\n        view\n        returns (address)\n    {\n        return _stakingRewardsMap[stakingToken];\n    }\n\n    /**\n     * @notice Return the staking token of a given underlying token\n     * @param underlying The underlying token\n     * @return The staking token\n     */\n    function getStakingToken(address underlying)\n        external\n        view\n        returns (address)\n    {\n        return _stakingTokenMap[underlying];\n    }\n\n    /**\n     * @notice Create staking reward contracts.\n     * @param stakingTokens The staking token list\n     */\n    function createStakingRewards(\n        address[] calldata stakingTokens,\n        address helperContract\n    ) external onlyOwner {\n        for (uint256 i = 0; i < stakingTokens.length; i++) {\n            address stakingToken = stakingTokens[i];\n            address underlying = ITokenInterface(stakingToken).underlying();\n            require(underlying != address(0), \"invalid underlying\");\n            require(\n                _stakingRewardsMap[stakingToken] == address(0),\n                \"staking rewards contract already exist\"\n            );\n\n            // Create a new staking rewards contract.\n            StakingRewards sr = new StakingRewards(\n                stakingToken,\n                helperContract\n            );\n            sr.transferOwnership(msg.sender);\n\n            _stakingRewards.push(address(sr));\n            _stakingRewardsMap[stakingToken] = address(sr);\n            _stakingTokenMap[underlying] = stakingToken;\n            emit StakingRewardsCreated(address(sr), stakingToken);\n        }\n    }\n\n    /**\n     * @notice Remove a staking reward contract.\n     * @param stakingToken The staking token\n     */\n    function removeStakingRewards(address stakingToken) external onlyOwner {\n        address underlying = ITokenInterface(stakingToken).underlying();\n        require(underlying != address(0), \"invalid underlying\");\n        require(\n            _stakingRewardsMap[stakingToken] != address(0),\n            \"staking rewards contract not exist\"\n        );\n\n        for (uint256 i = 0; i < _stakingRewards.length; i++) {\n            if (_stakingRewardsMap[stakingToken] == _stakingRewards[i]) {\n                _stakingRewards[i] = _stakingRewards[\n                    _stakingRewards.length - 1\n                ];\n                delete _stakingRewards[_stakingRewards.length - 1];\n                _stakingRewards.pop();\n                break;\n            }\n        }\n        _stakingRewardsMap[stakingToken] = address(0);\n        _stakingTokenMap[underlying] = address(0);\n        emit StakingRewardsRemoved(stakingToken);\n    }\n\n    /**\n     * @notice Seize tokens in this contract.\n     * @param token The token\n     * @param amount The amount\n     */\n    function seize(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n        emit TokenSeized(token, amount);\n    }\n}\n"
    },
    "contracts/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/StakingRewardsInterface.sol\";\n\ncontract StakingRewards is\n    Ownable,\n    Pausable,\n    ReentrancyGuard,\n    StakingRewardsInterface\n{\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    /// @notice The staking token address\n    IERC20 public stakingToken;\n\n    /// @notice The list of rewards tokens\n    address[] public rewardsTokens;\n\n    /// @notice The reward tokens mapping\n    mapping(address => bool) public rewardsTokensMap;\n\n    /// @notice The period finish timestamp of every reward token\n    mapping(address => uint256) public periodFinish;\n\n    /// @notice The reward rate of every reward token\n    mapping(address => uint256) public rewardRate;\n\n    /// @notice The reward duration of every reward token\n    mapping(address => uint256) public rewardsDuration;\n\n    /// @notice The last updated timestamp of every reward token\n    mapping(address => uint256) public lastUpdateTime;\n\n    /// @notice The reward per token of every reward token\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    /// @notice The reward per token paid to users of every reward token\n    mapping(address => mapping(address => uint256)) public rewardPerTokenPaid;\n\n    /// @notice The unclaimed rewards to users of every reward token\n    mapping(address => mapping(address => uint256)) public rewards;\n\n    /// @notice The helper contract that could stake, withdraw and claim rewards for users\n    address public helperContract;\n\n    /// @notice The total amount of the staking token staked in the contract\n    uint256 private _totalSupply;\n\n    /// @notice The user balance of the staking token staked in the contract\n    mapping(address => uint256) private _balances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _stakingToken, address _helperContract) {\n        stakingToken = IERC20(_stakingToken);\n        helperContract = _helperContract;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Return the total amount of the staking token staked in the contract.\n     * @return The total supply\n     */\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @notice Return user balance of the staking token staked in the contract.\n     * @return The user balance\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @notice Return the last time reward is applicable.\n     * @param _rewardsToken The reward token address\n     * @return The last applicable timestamp\n     */\n    function lastTimeRewardApplicable(address _rewardsToken)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            getBlockTimestamp() < periodFinish[_rewardsToken]\n                ? getBlockTimestamp()\n                : periodFinish[_rewardsToken];\n    }\n\n    /**\n     * @notice Return the reward token amount per staking token.\n     * @param _rewardsToken The reward token address\n     * @return The reward token amount\n     */\n    function rewardPerToken(address _rewardsToken)\n        public\n        view\n        returns (uint256)\n    {\n        // Return 0 if the rewards token is not supported.\n        if (!rewardsTokensMap[_rewardsToken]) {\n            return 0;\n        }\n\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored[_rewardsToken];\n        }\n\n        // rewardPerTokenStored + [(lastTimeRewardApplicable - lastUpdateTime) * rewardRate / _totalSupply]\n        return\n            rewardPerTokenStored[_rewardsToken] +\n            (((lastTimeRewardApplicable(_rewardsToken) -\n                lastUpdateTime[_rewardsToken]) *\n                rewardRate[_rewardsToken] *\n                1e18) / _totalSupply);\n    }\n\n    /**\n     * @notice Return the reward token amount a user earned.\n     * @param _rewardsToken The reward token address\n     * @param account The user address\n     * @return The reward token amount\n     */\n    function earned(address _rewardsToken, address account)\n        public\n        view\n        returns (uint256)\n    {\n        // Return 0 if the rewards token is not supported.\n        if (!rewardsTokensMap[_rewardsToken]) {\n            return 0;\n        }\n\n        // rewards + (rewardPerToken - rewardPerTokenPaid) * _balances\n        return\n            (_balances[account] *\n                (rewardPerToken(_rewardsToken) -\n                    rewardPerTokenPaid[_rewardsToken][account])) /\n            1e18 +\n            rewards[_rewardsToken][account];\n    }\n\n    /**\n     * @notice Return the reward rate.\n     * @param _rewardsToken The reward token address\n     * @return The reward rate\n     */\n    function getRewardRate(address _rewardsToken)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardRate[_rewardsToken];\n    }\n\n    /**\n     * @notice Return the reward token for duration.\n     * @param _rewardsToken The reward token address\n     * @return The reward token amount\n     */\n    function getRewardForDuration(address _rewardsToken)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardRate[_rewardsToken] * rewardsDuration[_rewardsToken];\n    }\n\n    /**\n     * @notice Return the amount of reward tokens.\n     * @return The amount of reward tokens\n     */\n    function getRewardsTokenCount() external view returns (uint256) {\n        return rewardsTokens.length;\n    }\n\n    /**\n     * @notice Return all the reward tokens.\n     * @return All the reward tokens\n     */\n    function getAllRewardsTokens() external view returns (address[] memory) {\n        return rewardsTokens;\n    }\n\n    /**\n     * @notice Return the staking token.\n     * @return The staking token\n     */\n    function getStakingToken() external view returns (address) {\n        return address(stakingToken);\n    }\n\n    /**\n     * @notice Return the current block timestamp.\n     * @return The current block timestamp\n     */\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Stake the staking token.\n     * @param amount The amount of the staking token\n     */\n    function stake(uint256 amount)\n        external\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        _stakeFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Stake the staking token for other user.\n     * @param account The user address\n     * @param amount The amount of the staking token\n     */\n    function stakeFor(address account, uint256 amount)\n        external\n        nonReentrant\n        whenNotPaused\n        updateReward(account)\n    {\n        require(msg.sender == helperContract, \"unauthorized\");\n        require(account != address(0), \"invalid account\");\n        _stakeFor(account, amount);\n    }\n\n    function _stakeFor(address account, uint256 amount) internal {\n        require(amount > 0, \"invalid amount\");\n        _totalSupply = _totalSupply + amount;\n        _balances[account] = _balances[account] + amount;\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(account, amount);\n    }\n\n    /**\n     * @notice Withdraw the staked token.\n     * @param amount The amount of the staking token\n     */\n    function withdraw(uint256 amount)\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        _withdrawFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Withdraw the staked token for other user.\n     * @dev This function can only be called by helper.\n     * @param account The user address\n     * @param amount The amount of the staking token\n     */\n    function withdrawFor(address account, uint256 amount)\n        public\n        nonReentrant\n        updateReward(account)\n    {\n        require(msg.sender == helperContract, \"unauthorized\");\n        require(account != address(0), \"invalid account\");\n        _withdrawFor(account, amount);\n    }\n\n    function _withdrawFor(address account, uint256 amount) internal {\n        require(amount > 0, \"invalid amount\");\n        _totalSupply = _totalSupply - amount;\n        _balances[account] = _balances[account] - amount;\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(account, amount);\n    }\n\n    /**\n     * @notice Claim rewards for the message sender.\n     */\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        _getRewardFor(msg.sender);\n    }\n\n    /**\n     * @notice Claim rewards for an account.\n     * @dev This function can only be called by helper.\n     * @param account The user address\n     */\n    function getRewardFor(address account)\n        public\n        nonReentrant\n        updateReward(account)\n    {\n        require(msg.sender == helperContract, \"unauthorized\");\n        require(account != address(0), \"invalid account\");\n        _getRewardFor(account);\n    }\n\n    function _getRewardFor(address account) internal {\n        for (uint256 i = 0; i < rewardsTokens.length; i++) {\n            uint256 reward = rewards[rewardsTokens[i]][account];\n            uint256 remain = IERC20(rewardsTokens[i]).balanceOf(address(this));\n            if (reward > 0 && reward <= remain) {\n                rewards[rewardsTokens[i]][account] = 0;\n                IERC20(rewardsTokens[i]).safeTransfer(account, reward);\n                emit RewardPaid(account, rewardsTokens[i], reward);\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraw all the staked tokens and claim rewards.\n     */\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /**\n     * @notice Set new reward amount.\n     * @dev Make sure the admin deposits `reward` of reward tokens into the contract before calling this function.\n     * @param rewardsToken The reward token address\n     * @param reward The reward amount\n     */\n    function notifyRewardAmount(address rewardsToken, uint256 reward)\n        external\n        onlyOwner\n        updateReward(address(0))\n    {\n        require(rewardsTokensMap[rewardsToken], \"reward token not supported\");\n\n        if (getBlockTimestamp() >= periodFinish[rewardsToken]) {\n            rewardRate[rewardsToken] = reward / rewardsDuration[rewardsToken];\n        } else {\n            uint256 remaining = periodFinish[rewardsToken] -\n                getBlockTimestamp();\n            uint256 leftover = remaining * rewardRate[rewardsToken];\n            rewardRate[rewardsToken] =\n                (reward + leftover) /\n                rewardsDuration[rewardsToken];\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint256 balance = IERC20(rewardsToken).balanceOf(address(this));\n        require(\n            rewardRate[rewardsToken] <= balance / rewardsDuration[rewardsToken],\n            \"reward rate too high\"\n        );\n\n        lastUpdateTime[rewardsToken] = getBlockTimestamp();\n        periodFinish[rewardsToken] =\n            getBlockTimestamp() +\n            rewardsDuration[rewardsToken];\n        emit RewardAdded(rewardsToken, reward);\n    }\n\n    /**\n     * @notice Seize the accidentally deposited tokens.\n     * @dev Thes staking tokens cannot be seized.\n     * @param tokenAddress The token address\n     * @param tokenAmount The token amount\n     */\n    function recoverToken(address tokenAddress, uint256 tokenAmount)\n        external\n        onlyOwner\n    {\n        require(\n            tokenAddress != address(stakingToken),\n            \"cannot withdraw staking token\"\n        );\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    /**\n     * @notice Set the rewards duration.\n     * @param rewardsToken The reward token address\n     * @param duration The new duration\n     */\n    function setRewardsDuration(address rewardsToken, uint256 duration)\n        external\n        onlyOwner\n    {\n        require(rewardsTokensMap[rewardsToken], \"reward token not supported\");\n        require(\n            getBlockTimestamp() > periodFinish[rewardsToken],\n            \"previous rewards not complete\"\n        );\n        _setRewardsDuration(rewardsToken, duration);\n    }\n\n    /**\n     * @notice Support new rewards token.\n     * @param rewardsToken The reward token address\n     * @param duration The duration\n     */\n    function addRewardsToken(address rewardsToken, uint256 duration)\n        external\n        onlyOwner\n    {\n        require(\n            !rewardsTokensMap[rewardsToken],\n            \"rewards token already supported\"\n        );\n\n        rewardsTokens.push(rewardsToken);\n        rewardsTokensMap[rewardsToken] = true;\n        emit RewardsTokenAdded(rewardsToken);\n\n        _setRewardsDuration(rewardsToken, duration);\n    }\n\n    /**\n     * @notice Set the helper contract.\n     * @param helper The helper contract address\n     */\n    function setHelperContract(address helper) external onlyOwner {\n        helperContract = helper;\n        emit HelperContractSet(helper);\n    }\n\n    /**\n     * @notice Pause the staking.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice Unpause the staking.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _setRewardsDuration(address rewardsToken, uint256 duration)\n        internal\n    {\n        rewardsDuration[rewardsToken] = duration;\n        emit RewardsDurationUpdated(rewardsToken, duration);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    /**\n     * @notice Update the reward information.\n     * @param user The user address\n     */\n    modifier updateReward(address user) {\n        for (uint256 i = 0; i < rewardsTokens.length; i++) {\n            address token = rewardsTokens[i];\n            rewardPerTokenStored[token] = rewardPerToken(token);\n            lastUpdateTime[token] = lastTimeRewardApplicable(token);\n            if (user != address(0)) {\n                rewards[token][user] = earned(token, user);\n                rewardPerTokenPaid[token][user] = rewardPerTokenStored[token];\n            }\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @notice Emitted when new reward tokens are added\n     */\n    event RewardAdded(address rewardsToken, uint256 reward);\n\n    /**\n     * @notice Emitted when user staked\n     */\n    event Staked(address indexed user, uint256 amount);\n\n    /**\n     * @notice Emitted when user withdrew\n     */\n    event Withdrawn(address indexed user, uint256 amount);\n\n    /**\n     * @notice Emitted when rewards are paied\n     */\n    event RewardPaid(\n        address indexed user,\n        address rewardsToken,\n        uint256 reward\n    );\n\n    /**\n     * @notice Emitted when a reward duration is updated\n     */\n    event RewardsDurationUpdated(address rewardsToken, uint256 newDuration);\n\n    /**\n     * @notice Emitted when a token is recovered by admin\n     */\n    event Recovered(address token, uint256 amount);\n\n    /**\n     * @notice Emitted when a reward token is added\n     */\n    event RewardsTokenAdded(address rewardsToken);\n\n    /**\n     * @notice Emitted when new helper contract is set\n     */\n    event HelperContractSet(address helper);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor() ERC20(\"Mock Token\", \"Mock\") {\n        _mint(msg.sender, 10000**uint256(decimals()));\n    }\n}\n"
    },
    "contracts/mocks/MockIToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/ITokenInterface.sol\";\n\ncontract MockIToken is ERC20, ITokenInterface {\n    using SafeERC20 for IERC20;\n\n    address private _underlying;\n    uint256 private _supplyRate;\n    uint256 private _exchangeRate;\n    bool private mintFailed;\n    bool private redeemFailed;\n\n    constructor(address underlying_) ERC20(\"Mock Token\", \"Mock\") {\n        _mint(msg.sender, 10000**uint256(decimals()));\n        _underlying = underlying_;\n    }\n\n    function underlying() external view returns (address) {\n        return _underlying;\n    }\n\n    function setSupplyRatePerBlock(uint256 supplyRate_) external {\n        _supplyRate = supplyRate_;\n    }\n\n    function supplyRatePerBlock() external view returns (uint256) {\n        return _supplyRate;\n    }\n\n    function setExchangeRateStored(uint256 exchangeRate_) external {\n        _exchangeRate = exchangeRate_;\n    }\n\n    function exchangeRateStored() external view returns (uint256) {\n        return _exchangeRate;\n    }\n\n    function setMintFailed() external {\n        mintFailed = true;\n    }\n\n    function mint(uint256 mintAmount) external returns (uint256) {\n        if (mintFailed) {\n            return 1; // Return non-zero to simulate graceful failure.\n        }\n\n        IERC20(_underlying).safeTransferFrom(\n            msg.sender,\n            address(this),\n            mintAmount\n        );\n        uint256 amount = (mintAmount * _exchangeRate) / 1e18;\n        _mint(msg.sender, amount);\n        return 0;\n    }\n\n    function setRedeemFailed() external {\n        redeemFailed = true;\n    }\n\n    function redeem(uint256 redeemTokens) external returns (uint256) {\n        if (redeemFailed) {\n            return 1; // Return non-zero to simulate graceful failure.\n        }\n\n        _burn(msg.sender, redeemTokens);\n        uint256 amount = (redeemTokens * 1e18) / _exchangeRate;\n        IERC20(_underlying).safeTransfer(msg.sender, amount);\n        return 0;\n    }\n}\n"
    },
    "contracts/mocks/MockStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../StakingRewards.sol\";\n\ncontract MockStakingRewards is StakingRewards {\n    uint256 private _blockTimestamp;\n\n    constructor(address _stakingToken, address _helperContract)\n        StakingRewards(_stakingToken, _helperContract)\n    {}\n\n    function setBlockTimestamp(uint256 timestamp) external {\n        _blockTimestamp = timestamp;\n    }\n\n    function getBlockTimestamp() public view override returns (uint256) {\n        return _blockTimestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}